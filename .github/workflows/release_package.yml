name: publish package
run-name: bump up package version by ${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        required: true
        description: 'Release type (one of)'
        options:
          - prepatch
          - preminor
          - premajor
          - prerelease
          - 'hotfix'
          - 'minor'
          - 'major'
  push:
    paths:
      - 'packages/linked-list/**'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project repository
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0 # Checkout all branches and tags

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          registry-url: https://registry.npmjs.org/
          node-version: '16'

      - uses: pnpm/action-setup@v2.0.1
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Check code style
        run: pnpm lint

      - name: Check Types
        run: pnpm types:check

      - name: Unit tests
        run: pnpm test

      - name: build package
        run: pnpm build

      - name: Git configuration
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      - name: Bump release version and use tag latest
        if: startsWith(github.event.inputs.release-type, 'pre') != true
        run: |
          cd './packages/linked-list'
          echo "NEW_VERSION=$(npm --no-git-tag-version version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      - name: Bump pre-release version and use tag beta for pre-release versions
        if: startsWith(github.event.inputs.release-type, 'pre')
        run: |
          cd './packages/linked-list'
          echo "NEW_VERSION=$(npm --no-git-tag-version --preid=beta version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=beta" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      # - name: Update changelog unreleased sections with new version
      #   uses: superfaceai/release-changelog-action@v1
      #   with:
      #     path-to-changelog: CHANGELOG.md
      #     version: ${{ env.NEW_VERSION }}
      #     operation: release

      # - name: Commit CHANGELOG.md and package.json changes and create tag
      #   run: |
      #     git add "package.json"
      #     git add "CHANGELOG.md"
      #     git commit -m "chore: release ${{ env.NEW_VERSION }}"
      #     git tag ${{ env.NEW_VERSION }}

      # - name: Publish
      #   run: pnpm publish --access public --tag ${{ env.RELEASE_TAG }}
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}

      # - name: Push changes to repository
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git push origin && git push --tags

      # - id: get-changelog
      #   name: Get version changelog
      #   uses: superfaceai/release-changelog-action@v1
      #   with:
      #     path-to-changelog: CHANGELOG.md
      #     version: ${{ env.NEW_VERSION }}
      #     operation: read

      # - name: Update GitHub release documentation
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ env.NEW_VERSION }}
      #     body: ${{ steps.get-changelog.outputs.changelog }}
      #     prerelease: ${{ startsWith(github.event.inputs.release-type, 'pre') }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
