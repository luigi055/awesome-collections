import { it, expect } from 'vitest';
import { LinkedListNode } from '../../linked-list-node';
import { RawLinkedList } from '../../raw-linked-list';
import { keys } from './keys';
import { pop } from '../pop';

it('should iterate all the keys in the linked list', () => {
  const rawLinkedList = new RawLinkedList<number>();
  const nodeOne = new LinkedListNode(345);
  const nodeTwo = new LinkedListNode(23);
  const nodeThree = new LinkedListNode(345);
  const nodeFour = new LinkedListNode(12);
  const nodeFive = new LinkedListNode(80);

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;

  rawLinkedList.length = 5;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeFive;

  const expectedkeys = [];
  for (const element of keys(rawLinkedList)) {
    expectedkeys.push(element);
  }

  expect(expectedkeys).toEqual([0, 1, 2, 3, 4]);
});

it('should manually go through all the elements using keys method', () => {
  const rawLinkedList = new RawLinkedList<number>();
  const nodeOne = new LinkedListNode(1445);
  const nodeTwo = new LinkedListNode(23);
  const nodeThree = new LinkedListNode(753);
  const nodeFour = new LinkedListNode(98);
  const nodeFive = new LinkedListNode(553);

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;

  rawLinkedList.length = 5;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeFive;

  const iterator = keys(rawLinkedList);

  const firstNext = iterator.next();
  const secondNext = iterator.next();
  const thirdNext = iterator.next();
  const fourthNext = iterator.next();
  const fifthtNext = iterator.next();
  const sixthNext = iterator.next();
  const seventhNext = iterator.next();
  const eighthNext = iterator.next();

  expect(firstNext.value).toBe(0);
  expect(firstNext.done).toBe(false);

  expect(secondNext.value).toBe(1);
  expect(secondNext.done).toBe(false);

  expect(thirdNext.value).toBe(2);
  expect(thirdNext.done).toBe(false);

  expect(fourthNext.value).toBe(3);
  expect(fourthNext.done).toBe(false);

  expect(fifthtNext.value).toBe(4);
  expect(fifthtNext.done).toBe(false);

  expect(sixthNext.value).toBe(undefined);
  expect(sixthNext.done).toBe(true);

  expect(seventhNext.value).toBe(undefined);
  expect(seventhNext.done).toBe(true);

  expect(eighthNext.value).toBe(undefined);
  expect(eighthNext.done).toBe(true);
});

it('should not show removed elements when call the next method manually using the keys method', () => {
  const rawLinkedList = new RawLinkedList<number>();
  const nodeOne = new LinkedListNode(1445);
  const nodeTwo = new LinkedListNode(23);
  const nodeThree = new LinkedListNode(753);
  const nodeFour = new LinkedListNode(98);
  const nodeFive = new LinkedListNode(553);

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;

  rawLinkedList.length = 5;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeFive;

  const iterator = keys(rawLinkedList);

  const firstNext = iterator.next();
  const secondNext = iterator.next();

  pop(rawLinkedList);
  pop(rawLinkedList);

  const thirdNext = iterator.next();
  const fourthNext = iterator.next();
  const fifthtNext = iterator.next();
  const sixthNext = iterator.next();
  const seventhNext = iterator.next();
  const eighthNext = iterator.next();

  expect(firstNext.value).toBe(0);
  expect(firstNext.done).toBe(false);

  expect(secondNext.value).toBe(1);
  expect(secondNext.done).toBe(false);

  expect(thirdNext.value).toBe(2);
  expect(thirdNext.done).toBe(false);

  expect(fourthNext.value).toBe(undefined);
  expect(fourthNext.done).toBe(true);

  expect(fifthtNext.value).toBe(undefined);
  expect(fifthtNext.done).toBe(true);

  expect(sixthNext.value).toBe(undefined);
  expect(sixthNext.done).toBe(true);

  expect(seventhNext.value).toBe(undefined);
  expect(seventhNext.done).toBe(true);

  expect(eighthNext.value).toBe(undefined);
  expect(eighthNext.done).toBe(true);
});

it('should each iterator generated by the keys method be completely independent when manage its internal state', () => {
  const rawLinkedList = new RawLinkedList<string>();
  const nodeOne = new LinkedListNode('hello');
  const nodeTwo = new LinkedListNode('my');
  const nodeThree = new LinkedListNode('name');
  const nodeFour = new LinkedListNode('is');
  const nodeFive = new LinkedListNode('pedro');

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;

  rawLinkedList.length = 5;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeFive;

  const keysOneIterator = keys(rawLinkedList);

  const keysOneIteratorFirst = keysOneIterator.next().value;
  const keysOneIteratorSecond = keysOneIterator.next().value;

  const keysTwoIterator = keys(rawLinkedList);

  const keysTwoIteratorFirst = keysTwoIterator.next().value;
  const keysTwoIteratorSecond = keysTwoIterator.next().value;

  expect(keysOneIteratorFirst).toBe(0);
  expect(keysOneIteratorSecond).toBe(1);
  expect(keysTwoIteratorFirst).toBe(0);
  expect(keysTwoIteratorSecond).toBe(1);
});

it('should iterable and iterator traits share the same state', () => {
  const rawLinkedList = new RawLinkedList<number>();
  const nodeOne = new LinkedListNode(5);
  const nodeTwo = new LinkedListNode(8);
  const nodeThree = new LinkedListNode(3);
  const nodeFour = new LinkedListNode(13);
  const nodeFive = new LinkedListNode(6);
  const nodeSix = new LinkedListNode(9);

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;
  nodeFive.next = nodeSix;
  nodeSix.previous = nodeFive;

  rawLinkedList.length = 6;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeSix;

  const iter = keys(rawLinkedList);

  expect(iter.next()).toEqual({ value: 0, done: false });
  expect(iter.next()).toEqual({ value: 1, done: false });

  const expectedRestOfIterator = [];
  for (const it of iter) {
    expectedRestOfIterator.push(it);
  }

  expect(expectedRestOfIterator).toEqual([2, 3, 4, 5]);
});
