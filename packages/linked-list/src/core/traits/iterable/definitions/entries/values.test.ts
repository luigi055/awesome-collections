import { it, expect } from 'vitest';
import { LinkedListNode } from '../../../../linked-list-node';
import { RawLinkedList } from '../../../../raw-linked-list';
import { entries } from './entries';
import { pop } from '../../../basic-linked-list';

it('should iterate all the entries in the linked list', () => {
  const rawLinkedList = new RawLinkedList<number>();
  const nodeOne = new LinkedListNode(345);
  const nodeTwo = new LinkedListNode(23);
  const nodeThree = new LinkedListNode(345);
  const nodeFour = new LinkedListNode(12);
  const nodeFive = new LinkedListNode(80);

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;

  rawLinkedList.length = 5;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeFive;

  const expectedentries = [];
  for (const element of entries(rawLinkedList)) {
    expectedentries.push(element);
  }

  expect(expectedentries).toEqual([
    [0, 345],
    [1, 23],
    [2, 345],
    [3, 12],
    [4, 80],
  ]);
});

it('should manually go through all the elements using entries method', () => {
  const rawLinkedList = new RawLinkedList<number>();
  const nodeOne = new LinkedListNode(1445);
  const nodeTwo = new LinkedListNode(23);
  const nodeThree = new LinkedListNode(753);
  const nodeFour = new LinkedListNode(98);
  const nodeFive = new LinkedListNode(553);

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;

  rawLinkedList.length = 5;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeFive;

  const iterator = entries(rawLinkedList);

  const firstNext = iterator.next();
  const secondNext = iterator.next();
  const thirdNext = iterator.next();
  const fourthNext = iterator.next();
  const fifthtNext = iterator.next();
  const sixthNext = iterator.next();
  const seventhNext = iterator.next();
  const eighthNext = iterator.next();

  expect(firstNext.value).toEqual([0, 1445]);
  expect(firstNext.done).toBe(false);

  expect(secondNext.value).toEqual([1, 23]);
  expect(secondNext.done).toBe(false);

  expect(thirdNext.value).toEqual([2, 753]);
  expect(thirdNext.done).toBe(false);

  expect(fourthNext.value).toEqual([3, 98]);
  expect(fourthNext.done).toBe(false);

  expect(fifthtNext.value).toEqual([4, 553]);
  expect(fifthtNext.done).toBe(false);

  expect(sixthNext.value).toBe(undefined);
  expect(sixthNext.done).toBe(true);

  expect(seventhNext.value).toBe(undefined);
  expect(seventhNext.done).toBe(true);

  expect(eighthNext.value).toBe(undefined);
  expect(eighthNext.done).toBe(true);
});

it('should not show removed elements when call the next method manually using the entries method', () => {
  const rawLinkedList = new RawLinkedList<number>();
  const nodeOne = new LinkedListNode(1445);
  const nodeTwo = new LinkedListNode(23);
  const nodeThree = new LinkedListNode(753);
  const nodeFour = new LinkedListNode(98);
  const nodeFive = new LinkedListNode(553);

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;

  rawLinkedList.length = 5;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeFive;

  const iterator = entries(rawLinkedList);

  const firstNext = iterator.next();
  const secondNext = iterator.next();

  pop(rawLinkedList);
  pop(rawLinkedList);

  const thirdNext = iterator.next();
  const fourthNext = iterator.next();
  const fifthtNext = iterator.next();
  const sixthNext = iterator.next();
  const seventhNext = iterator.next();
  const eighthNext = iterator.next();

  expect(firstNext.value).toEqual([0, 1445]);
  expect(firstNext.done).toBe(false);

  expect(secondNext.value).toEqual([1, 23]);
  expect(secondNext.done).toBe(false);

  expect(thirdNext.value).toEqual([2, 753]);
  expect(thirdNext.done).toBe(false);

  expect(fourthNext.value).toBe(undefined);
  expect(fourthNext.done).toBe(true);

  expect(fifthtNext.value).toBe(undefined);
  expect(fifthtNext.done).toBe(true);

  expect(sixthNext.value).toBe(undefined);
  expect(sixthNext.done).toBe(true);

  expect(seventhNext.value).toBe(undefined);
  expect(seventhNext.done).toBe(true);

  expect(eighthNext.value).toBe(undefined);
  expect(eighthNext.done).toBe(true);
});

it('should each iterator generated by the entries method be completely independent when manage its internal state', () => {
  const rawLinkedList = new RawLinkedList<string>();
  const nodeOne = new LinkedListNode('hello');
  const nodeTwo = new LinkedListNode('my');
  const nodeThree = new LinkedListNode('name');
  const nodeFour = new LinkedListNode('is');
  const nodeFive = new LinkedListNode('pedro');

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;

  rawLinkedList.length = 5;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeFive;

  const entriesOneIterator = entries(rawLinkedList);

  const entriesOneIteratorFirst = entriesOneIterator.next().value;
  const entriesOneIteratorSecond = entriesOneIterator.next().value;

  const entriesTwoIterator = entries(rawLinkedList);

  const entriesTwoIteratorFirst = entriesTwoIterator.next().value;
  const entriesTwoIteratorSecond = entriesTwoIterator.next().value;

  expect(entriesOneIteratorFirst).toEqual([0, 'hello']);
  expect(entriesOneIteratorSecond).toEqual([1, 'my']);
  expect(entriesTwoIteratorFirst).toEqual([0, 'hello']);
  expect(entriesTwoIteratorSecond).toEqual([1, 'my']);
});

it('should iterable and iterator traits share the same state', () => {
  const rawLinkedList = new RawLinkedList<number>();
  const nodeOne = new LinkedListNode(5);
  const nodeTwo = new LinkedListNode(8);
  const nodeThree = new LinkedListNode(3);
  const nodeFour = new LinkedListNode(13);
  const nodeFive = new LinkedListNode(6);
  const nodeSix = new LinkedListNode(9);

  nodeOne.next = nodeTwo;
  nodeTwo.next = nodeThree;
  nodeTwo.previous = nodeOne;
  nodeThree.next = nodeFour;
  nodeThree.previous = nodeTwo;
  nodeFour.next = nodeFive;
  nodeFour.previous = nodeThree;
  nodeFive.previous = nodeFour;
  nodeFive.next = nodeSix;
  nodeSix.previous = nodeFive;

  rawLinkedList.length = 6;
  rawLinkedList.head = nodeOne;
  rawLinkedList.tail = nodeSix;

  const iter = entries(rawLinkedList);

  expect(iter.next()).toEqual({ value: [0, 5], done: false });
  expect(iter.next()).toEqual({ value: [1, 8], done: false });

  const expectedRestOfIterator = [];
  for (const it of iter) {
    expectedRestOfIterator.push(it);
  }

  expect(expectedRestOfIterator).toEqual([
    [2, 3],
    [3, 13],
    [4, 6],
    [5, 9],
  ]);
});
